name: Build and Deploy AUR Repository

on:
  push:
    branches: [main]
    paths:
      - 'packages/**/PKGBUILD'
  workflow_dispatch:

env:
  BUCKET: aur-repo
  ENDPOINT: ${{ secrets.R2_ENDPOINT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}

jobs:
  list:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # 保留完整历史以便 diff

      - id: set-matrix
        run: |
          # 检测相对于 main 分支变更的 PKGBUILD 文件
          git fetch origin main
          changed=$(git diff --name-only origin/main...HEAD -- 'packages/*/PKGBUILD' | xargs -r dirname | jq -R -s -c 'split("\n")[:-1]')
          echo "Detected changed packages: $changed"
          echo "matrix=$changed" >> $GITHUB_OUTPUT

  build:
    name: Build & Upload Packages
    needs: list
    if: needs.list.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkgdir: ${{ fromJson(needs.list.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      # 缓存 pacman 软件包，加快构建速度
      - name: Cache Pacman packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pacman/pkg
          key: ${{ runner.os }}-pacman

      - name: Build Package in Arch Container
        run: |
          docker run --rm -v "$PWD":/src -w /src \
            -e BUCKET -e ENDPOINT -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY \
            archlinux:latest bash <<'EOF'
            set -euxo pipefail

            # 更新系统并安装依赖
            pacman -Syu --noconfirm
            pacman -S --noconfirm base-devel sudo git pacman-contrib rclone

            # 创建构建用户
            useradd -m -G wheel build
            echo "build ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
            chown -R build:build /src

            cd "/src/${{ matrix.pkgdir }}"

            # 构建软件包（完整校验）
            su build -c "makepkg --syncdeps --noconfirm --clean --cleanbuild --nodebug"

            # 解析架构
            arch=$(tar -xOf *.pkg.tar.zst .PKGINFO | grep '^arch = ' | cut -d' ' -f3)
            [ "$arch" = "any" ] && target="any" || target="x86_64"
            workdir="/tmp/repo-$target"
            mkdir -p "$workdir"
            cp *.pkg.tar.zst "$workdir"

            # 配置 rclone (Cloudflare R2)
            rclone config create r2 s3 provider=Cloudflare env_auth=true endpoint="$ENDPOINT"

            # 清理旧版本，仅保留最新
            cd "$workdir"
            pkgname=$(tar -xOf *.pkg.tar.zst .PKGINFO | grep '^pkgname = ' | cut -d' ' -f3)
            ls ${pkgname}-*.pkg.tar.zst | sort -Vr | tail -n +2 | xargs -r rm -f

            # 下载当前仓库索引
            rclone copy "r2:$BUCKET/$target" "$workdir" || true

            # 更新 repo.db / repo.files
            repo-add -n -R "$workdir/hanselaur.db.tar.gz" "$workdir"/*.pkg.tar.zst

            ln -sf hanselaur.db.tar.gz hanselaur.db
            ln -sf hanselaur.files.tar.gz hanselaur.files

            # 上传到 R2
            rclone copy "$workdir" "r2:$BUCKET/$target" --progress
          EOF

      # 构建产物存档（可选）
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkgdir }}-pkg
          path: ${{ matrix.pkgdir }}/*.pkg.tar.zst

      # 失败通知（控制台输出或可替换为 Telegram/Discord）
      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Build failed for package: ${{ matrix.pkgdir }}"
