name: Build & Publish

on:
  push:
    branches: [main]
    paths:
      - 'packages/**/PKGBUILD'

env:
  BUCKET: aur-repo
  ENDPOINT: https://pub-c388a4aca5ea4050a0afd58c60a78cb3.r2.dev
  AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}

jobs:
  list:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2
      - id: set-matrix
        run: |
          changed=$(git diff --name-only HEAD^..HEAD -- packages/*/PKGBUILD | xargs -r dirname | jq -R -s -c 'split("\n")[:-1]')
          echo "matrix=$changed" >> $GITHUB_OUTPUT

  build:
    needs: list
    if: needs.list.outputs.matrix != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkgdir: ${{ fromJson(needs.list.outputs.matrix) }}
    steps:
      - uses: actions/checkout@v4

      # 唯一关键步骤：用非 root 用户跑 makepkg
      - name: Build package
        run: |
          docker run --rm -v "$PWD":/src -w /src \
            archlinux:latest bash -ec '
              pacman -Syu --noconfirm
              pacman -S --noconfirm base-devel sudo git
              useradd -m -G wheel build
              echo "build ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
              # 把整棵源码树交给 build 用户
              chown -R build:build /src
              cd /src/${{ matrix.pkgdir }}
              su build -c "makepkg --syncdeps --noconfirm --cleanbuild --skipinteg"
            '
          # 只取普通包（排除 *-debug-*.pkg.tar.zst）
          pkg=$(find ${{ matrix.pkgdir }} -name "*.pkg.tar.zst" ! -name "*-debug-*" -printf '%f\n' | head -n1)
          # 确保无空格、括号等特殊字符破坏 env 文件
          echo "PKG<<EOF" >> $GITHUB_ENV
          echo "$pkg" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Install rclone
        run: sudo apt install -y rclone

      - name: Push to R2
        run: |
          # 1. 修正 tar 参数；2. 用 /tmp 避开权限问题
          arch=$(tar -xOf "${{ matrix.pkgdir }}/${{ env.PKG }}" .PKGINFO | grep '^arch = ' | cut -d' ' -f3)
          [ "$arch" = "any" ] && target="any" || target="x86_64"
          workdir="/tmp/repo-$target"
          mkdir -p "$workdir"

          rclone config create r2 s3 provider=Cloudflare \
                access_key_id=$AWS_ACCESS_KEY_ID \
                secret_access_key=$AWS_SECRET_ACCESS_KEY \
                endpoint=$ENDPOINT

          rclone copy "r2:$BUCKET/$target/$BUCKET.db.tar.gz" "$workdir/" || true
          rclone copy "r2:$BUCKET/$target/$BUCKET.files.tar.gz" "$workdir/" || true

          cp "${{ matrix.pkgdir }}/${{ env.PKG }}" "$workdir/"
          repo-add -n -R "$workdir/$BUCKET.db.tar.gz" "$workdir"/*.pkg.tar.zst

          rclone copy "$workdir/" "r2:$BUCKET/$target/" --progress