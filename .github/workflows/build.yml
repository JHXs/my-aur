name: Build and Deploy AUR Repository

on:
  push:
    branches: [main]
    paths:
      - 'packages/**/PKGBUILD'
  workflow_dispatch:

env:
  REPO: hanselaur
  BUCKET: aur-repo
  ENDPOINT: ${{ secrets.R2_ENDPOINT }}
  AWS_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_KEY }}

jobs:
  list:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 2  

      - name: Set Changed Packages Matrix
        id: set-matrix
        run: |
          set -e
          changed=$(git diff --name-only HEAD^..HEAD -- 'packages/*/PKGBUILD' | xargs -r dirname | jq -R -s -c 'split("\n")[:-1]')
          echo "Detected changed packages: $changed"
          echo "matrix=$changed" >> $GITHUB_OUTPUT

  build:
    name: Build & Upload Packages
    needs: list
    if: needs.list.outputs.matrix != '[]' || github.event_name == 'workflow_dispatch'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        pkgdir: ${{ fromJson(needs.list.outputs.matrix) }}

    steps:
      - uses: actions/checkout@v4

      # 缓存 pacman 软件包，加快构建速度
      - name: Cache Pacman packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pacman/pkg
          key: ${{ runner.os }}-pacman

      - name: Build Package in Arch Container
        run: |
          docker run --rm -v "$PWD":/src -w /src \
            -e REPO -e BUCKET -e ENDPOINT -e AWS_ACCESS_KEY_ID -e AWS_SECRET_ACCESS_KEY \
            archlinux:latest bash -c '
              set -euxo pipefail

              pacman -Syu --noconfirm
              pacman -S --noconfirm base-devel sudo git pacman-contrib rclone

              useradd -m -G wheel build
              echo "build ALL=(ALL) NOPASSWD:ALL" >> /etc/sudoers
              chown -R build:build /src

              cd "/src/${{ matrix.pkgdir }}"

              su build -c "makepkg --syncdeps --noconfirm --clean --cleanbuild --nodebug"

              arch=$(tar -xOf *.pkg.tar.zst .PKGINFO | grep "^arch = " | cut -d" " -f3)
              [ "$arch" = "any" ] && target="any" || target="x86_64"
              workdir="/tmp/repo-$target"
              mkdir -p "$workdir"
              cp *.pkg.tar.zst "$workdir"

              rclone config create r2 s3 provider=Cloudflare env_auth=true endpoint="$ENDPOINT"

              cd "$workdir"
              pkgname=$(tar -xOf *.pkg.tar.zst .PKGINFO | grep "^pkgname = " | cut -d" " -f3)
              ls ${pkgname}-*.pkg.tar.zst | sort -Vr | tail -n +2 | xargs -r rm -f

              rclone copy "r2:$BUCKET/$target" "$workdir" || true

              repo-add -n -R "$workdir/$REPO.db.tar.gz" "$workdir"/*.pkg.tar.zst

              ln -sf $REPO.db.tar.gz $REPO.db
              ln -sf $REPO.files.tar.gz $REPO.files

              rclone copy "$workdir" "r2:$BUCKET/$target" --progress
            '


      # 构建产物存档（可选）
      - name: Upload Package Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.pkgdir }}-pkg
          path: ${{ matrix.pkgdir }}/*.pkg.tar.zst

      # 失败通知（控制台输出或可替换为 Telegram/Discord）
      - name: Notify on Failure
        if: failure()
        run: |
          echo "❌ Build failed for package: ${{ matrix.pkgdir }}"
